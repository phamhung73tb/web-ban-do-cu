package uet.ktmt.myproject.common.regression;import com.opencsv.CSVReader;import org.apache.commons.math3.linear.RealMatrix;import java.io.FileReader;import java.io.IOException;import java.util.*;public class LinearRegression {    private static final String dataPath = "src/main/resources/data/Book1.csv";    private Set<Integer> userIdList = new HashSet<>();    private Set<Integer> productIdList = new HashSet<>();    private Set<Integer> categoryIdList = new HashSet<>();    private List<Double> ratingList = new ArrayList<>();    private Map<Integer, List<Integer>> clickingMap = new HashMap<>();    private RealMatrix clickingMatrix;    private static List<List<String>> getRecord() {        List<List<String>> records = new ArrayList<List<String>>();        try (CSVReader csvReader = new CSVReader(new FileReader(dataPath))) {            String[] values = null;            while ((values = csvReader.readNext()) != null) {                records.add(Arrays.asList(values));            }        } catch (IOException e) {            e.printStackTrace();        }        return records;    }    private void getData() {        for (int i = 1; i < getRecord().size(); i++) {            List<String> record = getRecord().get(i);            productIdList.add(Integer.parseInt(record.get(0)));            userIdList.add(Integer.parseInt(record.get(5)));            categoryIdList.add(Integer.parseInt(record.get(2)));            if (record.get(6).equals("")) {                ratingList.add(null);            } else {                ratingList.add(i - 1, Double.parseDouble(record.get(6)));            }            if (clickingMap.containsKey(Integer.parseInt(record.get(0)))) {                List<Integer> clicking = new ArrayList<>(clickingMap.get(Integer.parseInt(record.get(0))));                clicking.add(Integer.parseInt(record.get(7)));                clickingMap.put(Integer.parseInt(record.get(0)), clicking);            } else {                clickingMap.put(Integer.parseInt(record.get(0)), List.of(Integer.parseInt(record.get(7))));            }        }        for (int i = 0; i < clickingMap.size(); i ++) {            int keyProduct = productIdList.size();            double[] subVector = new double[clickingMap.get(productIdList.size()).size()];            for (int j = 0; j < clickingMap.get(i).size(); j++) {                subVector[j] = clickingMap.get(i).get(j);            }            clickingMatrix.setColumn(i, subVector);        }    }    public double tf(List<String> doc, String term) {        double result = 0;        for (String word : doc) {            if (term.equalsIgnoreCase(word))                result++;        }        return result / doc.size();    }    public double idf(List<List<String>> docs, String term) {        double n = 0;        for (List<String> doc : docs) {            for (String word : doc) {                if (term.equalsIgnoreCase(word)) {                    n++;                    break;                }            }        }        return Math.log(docs.size() / n);    }    public double tfIdf(List<String> doc, List<List<String>> docs, String term) {        return tf(doc, term) * idf(docs, term);    }    public static void main(String[] args) {        LinearRegression ln = new LinearRegression();        ln.getData();        System.out.println(ln.clickingMatrix);    }}